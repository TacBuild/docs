openapi: 3.1.0
info:
  description: This is a sample server celler server.
  title: Swagger API
  termsOfService: http://swagger.io/terms/
  contact:
    name: API Support
    url: http://www.swagger.io/support
    email: support@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: "1.0"
servers:
  - url: https://turin.data.tac.build
  - url: http://turin.data.tac.build

paths:
  /evm/IsMerkleMessageCollected:
    get:
      description: Check if the EVM MerkleMsg is collected.
      tags:
        - EVM
      summary: Check if merkle message is collected
      parameters:
        - schema:
            type: string
          description: Operation ID
          name: operationId
          in: query
          required: true
      responses:
        "200":
          description: True if the merkle message is collected
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BoolResponse"
        "400":
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringResponse"
        "404":
          description: Operation ID not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /evm/IsMerkleMessageExecuted:
    get:
      description: Check if the Merkle message is executed in the EVM chain.
      tags:
        - EVM
      summary: Check if Merkle Message is Executed
      parameters:
        - schema:
            type: string
          description: Operation ID
          name: operationId
          in: query
          required: true
      responses:
        "200":
          description: True if the message is executed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BoolResponse"
        "400":
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Operation ID not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /evm/IsMerkleRootSet:
    get:
      description: Check if the Merkle root is set in the EVM chain.
      tags:
        - EVM
      summary: Check if Merkle Root is Set
      parameters:
        - schema:
            type: string
          description: Operation ID
          name: operationId
          in: query
          required: true
      responses:
        "200":
          description: True if the root is set
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BoolResponse"
        "400":
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringResponse"
        "404":
          description: Operation ID not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /logs:
    get:
      description: Retrieve the content of a specific log file by filename.
      tags:
        - Logs
      summary: Get log file content
      parameters:
        - schema:
            type: string
          description: Name of the log file
          name: filename
          in: query
          required: true
      responses:
        "200":
          description: Log file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400":
          description: Filename is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: File doesn't exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Can't read file
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /numberOfUserShards:
    get:
      description: Returns the number of shards associated with a user
      tags:
        - Shards statistics
      summary: Get number of user shards
      parameters:
        - schema:
            type: integer
          description: Sharded ID
          name: shardedId
          in: query
          required: true
        - schema:
            type: string
          description: Caller address
          name: caller
          in: query
          required: true
        - schema:
            type: integer
          description: Shard count
          name: shardCount
          in: query
          required: true
        - schema:
            type: integer
          description: Timestamp
          name: timestamp
          in: query
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IntResponse"
        "400":
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Data not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /operationId:
    get:
      description: Returns a unique operationId to track the entire path of a transaction.
      tags:
        - OperationId
      summary: Get Operation ID
      parameters:
        - schema:
            type: integer
          description: Sharded ID
          name: shardedId
          in: query
          required: true
        - schema:
            type: string
          description: Caller
          name: caller
          in: query
          required: true
        - schema:
            type: integer
          description: Shard Count
          name: shardCount
          in: query
          required: true
        - schema:
            type: integer
          description: Timestamp
          name: timestamp
          in: query
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringResponse"
        "400":
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /stageProfiling:
    get:
      description: Retrieves time information for every stage of transaction based on operation ID
      tags:
        - Time profiling
      summary: Get stage profiling
      parameters:
        - schema:
            type: string
          description: Operation ID
          name: operationId
          in: query
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StageProfilingResponse"
        "400":
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Data not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /status:
    get:
      description: Get the status of an operation by its Operation ID
      tags:
        - Status
      summary: Get status
      parameters:
        - schema:
            type: string
          description: Operation ID
          name: operationId
          in: query
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringResponse"
        "400":
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Operation ID not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /tvm/IsMerkleMessageCollected:
    get:
      description: Check if the TVM MerkleMsg is collected.
      tags:
        - TVM
      summary: Check if TVM Merkle Message is Collected
      parameters:
        - schema:
            type: string
          description: Operation ID
          name: operationId
          in: query
          required: true
      responses:
        "200":
          description: True if merkle message is collected
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BoolResponse"
        "400":
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Operation ID not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /tvm/IsMerkleMessageExecuted:
    get:
      description: Check if TVM Merkle Message is executed
      tags:
        - TVM
      summary: Check if TVM Merkle Message is executed
      parameters:
        - schema:
            type: string
          description: Operation ID
          name: operationId
          in: query
          required: true
      responses:
        "200":
          description: True if merkle message is executed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BoolResponse"
        "400":
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Operation ID not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /tvm/IsMerkleRootSet:
    get:
      description: Check if the Merkle root is set in the TVM chain.
      tags:
        - TVM
      summary: Check if Merkle Root is Set
      parameters:
        - schema:
            type: string
          description: Operation ID
          name: operationId
          in: query
          required: true
      responses:
        "200":
          description: True if the root is set
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BoolResponse"
        "400":
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Operation ID not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    ExecutionStages:
      type: object
      properties:
        evm_merkle_msg_collected:
          type: string
        evm_merkle_msg_executed:
          type: string
        evm_out_event_collected:
          type: string
        tvm_merkle_msg_collected:
          type: string
        tvm_merkle_msg_executed:
          type: string
    BoolResponse:
      type: object
      properties:
        response:
          type: boolean
    Error:
      type: object
      properties:
        error:
          type: string
    IntResponse:
      type: object
      properties:
        response:
          type: integer
    StageProfilingResponse:
      type: object
      properties:
        response:
          $ref: "#/components/schemas/ExecutionStages"
    StringResponse:
      type: object
      properties:
        response:
          type: string

  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic

externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
